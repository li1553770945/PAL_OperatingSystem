#ifndef POS_FILESYSTEM_HPP
#define POS_FILESYSTEM_HPP

#include "../Error.hpp"
#include "../Library/TemplateTools.hpp"
#include "../Process/Synchronize.hpp"

class FileNode;
class VirtualFileSystem;

inline const char * InvalidFileNameCharacter()
{return "/\\:*?\"<>|";}

inline bool IsValidFileNameCharacter(char ch)
{return NotInSet(ch,'/','\\',':','*','?','\"','<','>','|');}

class FileHandle
{
	public:
		enum
		{
			F_Read	=1ull<<0,
			F_Write	=1ull<<1,
			F_Seek	=1ull<<2,
			F_Size	=1ull<<3
		};
	
		enum
		{
			Seek_Beg=0,
			Seek_Cur,
			Seek_End,
		};
	
	protected:
		FileNode *file;
		Uint64 Flags;
		
	public:
		Sint64 Read(void *dst,Uint64 size);
		Sint64 Write(void *src,Uint64 size);
		ErrorType Seek(Uint64 pos);
		Uint64 Size();
		ErrorType Close();
};

class FileNode
{
	public:
		enum
		{
			Attri_Dir		=1ull<<0,
			Attri_Deleted	=1ull<<1,
			Attri_Link		=1ull<<2
		};
		
//		enum
//		{
//			Type_None=0,
//			Type_File,
//			Type_Directory,
//			Type_VFS
//		};
	
	protected:
		VirtualFileSystem *Vfs;
		char *Name;
//		Uint8 Type,
//			  Padding[7];
		Uint64 Attributes;
		FileNode *fa;
		
		union
		{
			
		};

		Uint64 FileSize;
		Uint64 CreatedTime,
			   ModifyTime,
			   AccessTime;
		
	public:
		ErrorType Read(void *dst,Uint64 pos,Uint64 size);
		ErrorType Write(void *src,Uint64 pos,Uint64 size);
		Uint64 Size();
		ErrorType Ref();
		ErrorType Unref();
};

class VirtualFileSystemManager
{
	protected:
		Mutex mu;
		
	public:
		FileNode* FindFile(const char *path,const char *name);
		int GetAllFileIn(const char *path,char *result[],int bufferSize);//if unused ,user should free the char*
		ErrorType CreateDirectory(const char *path);
		ErrorType CreateFile(const char *path);
		ErrorType Move(const char *src,const char *dst);
		ErrorType Copy(const char *src,const char *dst);
		
		FileNode* Open(const char *path);
		ErrorType Close(FileNode *p);
};
extern VirtualFileSystemManager VFSM;

class VirtualFileSystem
{
	public://Path parameter in VFS is relative path to the VFS root.
		virtual const char *FileSystemName()=0;
		virtual FileNode* FindFile(const char *path,const char *name)=0;
		virtual int GetAllFileIn(const char *path,char *result[],int bufferSize)=0;//if unused ,user should free the char*
		virtual ErrorType CreateDirectory(const char *path)=0;
		virtual ErrorType CreateFile(const char *path)=0;
		virtual ErrorType Move(const char *src,const char *dst)=0;
		virtual ErrorType Copy(const char *src,const char *dst)=0;
		
		virtual FileNode* Open(const char *path)=0;
		virtual ErrorType Close(FileNode *p)=0;
		
		virtual ~VirtualFileSystem()=0;
		VirtualFileSystem();
};

#endif
